define structure for gameNodes

struct Tree {
    game: game,
    nnet: nnet,
    root: Node,
    Q:    Hashmap from (s,a) to Q-value,
    move_count: Hashmap from (s,a) to the number of times an edge is visited,
    state_count: Hashmap from s to the number of times a state is visited,
    policies: Hashmap from s to the initial probability distribution over next actions,
    Valid_actions: ,
    game_ended: ,
}


struct Node {
    Q: map from actions to f32
    move_count: map from actions to u32,
    count: u32,
    prob: ,
    valid_actions: ,
    game_ended: , 
}

impl MCTS {

    // returns the negative of the value of the current node
    fn search(&self, s) -> f32 {

        if game.ended(s) {
            return -game.reward(s)
        }

        if not Tree.has_state(s) {
            let prob, v = nnet.predict(s);
            let valids = game.get_valid_moves(s);
            prob = prob * valid; // masking the invalid moves
            let sum_prob = sum(prob)
            // renormalize if some valid moves remain unmasked
            if sum_prob > 0:
                prob = prob / sum_prob
            // when all the valid moves are masked
            else:
                // assign every valid move an equal probability
                prob = valid
                prob /= sum(valid)
            
            Tree.add(s)
            let Tree.valid_actions
            



        }
        

    }


    fn getImprovedProb(&self) -> f32 {

    }

}

